(Updated - Assignment2)
Design Rationale
    - To fulfill some missing parts of the game Jurassic World via creating and modifying classes.

Overview
    Classes to be modified
        - Dirt, Tree, Stegosaur
    Classes to be created
        - Bush, Egg, VendingMachine, Fruit, Dinosaur, Brachiosaur, Allosaur, HarvestAction, PurchaseAction,
          FeedAction, BreedBehaviour, SeekFoodBehaviour, HatchBehaviour, GroundLocation,
          CanivoreMeal, vegetarianMeal, LaserGun, Type(Enum), EcoPoint(static)

    Classes added (in Assignment2)
        -  BreedAction, eatFoodAction, Corpse, StegosaurCorpse, AllosaurCorpse, BrachiosaurCorpse, Util, DinosaurGameMap

    Classes added (in Assignment3)
        - DrinkAction, QuitAction, SeekWaterBehaviour, Pterodactyls, Lake, PteodactylsEgg, PteodactylsCorpse, Fish, JurassicWorld

    Classes removed (in Assignment2)
        - LayEggBehaviour, FruitHarvested, ShootAction

    Classes removed(or Deprecated) (in Assignment3)
        - GroundLocation

    Classes modified (in Assignment2)
        - Fruit

    Classes modified (in Assignment3)
        - AttackAction, VendingMachine, PurchaseAction, EcoPoint, Util, Dinosaur, BreedAction, Type, FeedAction, DinosaurGameMap

    We have designed most of the classes to inherit from the existing classes from the engine. Since engine provides the
    most of necessary parent classes, it should be able to reduce dependencies and fulfil given requirements.

    Dirt, tree and bush
    First of all, we created DinosaurGameMap that extends GampMap in order to create new GroundLocation instead of Location instance.
    We also overrode tick() in GroundLocation, hence we were able to do ‘other work’ before tick() in Ground is invoked.
    Dirt, Tree and Bush extends Ground. tick() in GroundLocation checks what Ground object is on the square and functions as on the specification, depending on the objects.
    Dirt, Tree and Bush classes have no such functions but GroundLocation fulfils the requirements of each classes.
    The reason behind GroundLocation takes care of those requirements is simply we can manage all Ground objects in a single class and reduce dependancy(EcoPoint)

    Hungry dinosaur
    for the "food level" of the dinosaurs hitpoints variable of Actor was chosen because the health of the dinosaur is the same as the food level.
    the tick() method in Dinosaur class reduces the food level by 1 every turn so it can be called for every turn by each dinosaur.
    SeekFoodBehaviour (extends Behaviour) is called if the dinosaur's food level is below its minimum hunger
    Returns EatFoodAction if dinosaur is standing on food source else makes sure dinosaur goes to the closest food source for it.

    Brachiosaur, Steogosaur and Allosaur
    Stegosaur, Brachiosaur and Allosaur are going to have same attributes and methods, so we designed to create parent class of them, which is Dinosaur, and the parent class extends the Actor in the engine.
    Hence, we look forward to reduce repetition(DRY) of codes.

    Eco points and purchasing
    EcoPoint is an abstract class to prevent not to create as an instance and all attributes and methods are static, meaning that eco points are decreased and increased without getting the EcoPoint reference.
    This is because eco point is obtained in diverse ways. Furthermore, manipulating eco points via static methods is better in terms of future maintenance. Because we may other classes that manipluates eco points as well.
    We made a VendingMachine class that allows PurchaseAction if the player is nearby.
    VendingMachine extends Ground only for displaying ‘M’ character and its main role is to manipulate Items in the machine.
    PurchaseAction gets reference to the VendingMachine and displays menu items, quantities, removes the item player selects and decreases eco points.

    Breeding
    BreedBehaviour extends Behaviour because they share the same methods so getAction was overridden so it returns BreedAction is actor has a mate next to it
    or else it returns FollowBehaviour which makes the actor move towards the closest mate.This returns FollowBehaviour's getAction method so we reduce the repetition
    BreedAction extends Action to over ride the execute  method
    When executed it make the female dinosaur have a enum pregnant which gives the dinosaur a breeding length so in the tick method of the dinosaur the breeding time and laying egg can be managed

    Death
    tick() method in Dinosaur counts when Dinosaur is unconscious class because all the dinosaurs share the same tick method.If the actor is unconscious for certain amount of turns it gets removed from the map and an corpse item is added


    --- Assignment 3---
    Thirsty dinosaurs
    For finding  a source of water (lake) a new seekwaterBhaviour class was created which extends Behaviour which allows us to give the behaviour to the dinosaurs as all the dinosaurs share the same method of getting water.This function returns a move action if there is no water adjacent to the dinosaur, else it returns a drinkaction which  increases the water by the relevant values for each dinosaur.
     The moveactor action was changed from the moveactoraction class to the move actoraction method in the Location class because it has canActorEnter methods which has checks so only  pterodactyl can pass over lakes.

    New waterLevel attribute was added into the Dinosaur class and this was decreased by one every turn by the tick() in Dinosaur class.When rain occurs in JurassicWorld Class it goes over the map and if any actor has the enum UNCONCIOUS they will get + 10 waterLevel through the Dinosaur class increaseWater() which was added so all Dinosaurs can share this method.

    Playturn method was also moved into Dinosaur class to improve code reuse .

    Pterodactyls
    New class Pterodactyls which extends Dinosaur was created so they can share the methods . Pterodactyls have new attribute fuel which is the number of turns it can fly.Catching fish is done in the eatFoodaction which checks the tile the actor is standing on and if it has fish eats random 0-1 value and adds 30 water. This is done here because the actor only eats if its hungry rather than eat every time it moves over a lake block.
    To eat corpses at 10 food points at a time the DinosaurCorpse items where given a foodPoints attribute which stores the total amount of foodPoints that can be obtained from eating the corpse.where 10 points is deducted every turn it eats it, and removed if the foodPoints reach zero.

    Breeding is done by the normal BreedBehaviour where it will go near a partner of opposite gender but if they are not on a tree they do not breed.This is done in the Breedaction class. Egg is layed after by the tick method in dinosaur function and if its time to lay the egg but actor is on a lake tile it will be halt until the actors gets onto a ground.This is done by tick method because it needs to be checked every turn.Identifying if  Pterodactyls are flying or not is done with enums CAN_FLY and CANT_FLY.



Initial Design of each classes
    Dirt (extends Ground)
        - Responsible for produce fruits
        - This overrides tick() method from Ground class.
        - Modify the tick() to produce a fruit depending on a chance

    Tree (extends Ground)
        - Responsible for producing fruit and a bush and drop a fruit depending on a chance
        - This overrides tick() method from Ground class
        - Modify the tick() to produce a fruit depending on a chance

    Bush (extends Ground)
        - Responsible for producing a fruit by chance
        - Bush extends Ground. When tick() is invoked in GameMap, check if it a Dirt, if so, replace to a Bush using setGround()
        - Override tick() from Ground and then create Fruit instance if it can


    GroundLocation (extends Location)
        - Responsible for check capabilities of the object for corresponding performance. For instance, getGround() to check
          which object stays on the spot and then perform tick action.
        - This class extends Location class to override tick() method to find objects nearby.
        - If a instance of subclass of Ground at specific location override tick() that functions to find objects nearby
          and give it chance to grow a bush by different chance.

    HarvestAction (extends Action)
        - This action is to attempt to find a fruit from a tree or a bush. This action has a chance of failing.
        - This class overrides the execute() and menuDescription() method from the Action class
        - In every turn, user will be given a chance for choosing an action. If this is selected, execute().

    Stegosaur (extends Dinosaur)
        - Responsible for wander, eat fruits and breeding
        - This class extends Dinosaur that provide shared methods with brachiosaur and allosaur.
        - Overrides methods to if it is hungry, baby and conscious for WanderBehaviour, EatBehaviour and BreedBehaviour.

    Brachiosaur (extends Dinosaur)
        - Responsible for wander, eat fruits and breeding
        - This class extends Dinosaur that provide shared methods with Stegosaur and Allosaur.
        - Overrides methods to if it is hungry, baby and conscious for WanderBehaviour, EatBehaviour and BreedBehaviour.

    Dinosaur (extends Actor)
        - Responsible for providing shared methods for Stegosaur, Brachiosaur and Allosaur
        - This extends Actor to let child classes to override from Actor
        - This simply gives an ability to override.

    Allosaur (extends Dinosaur)
        - Reposible for attack Stegosaur or Brachiosaur
        - This extends Dinosaur
        - This also override getAllowableActions() to add ShootAction and may be dead if get a gun shot.

    BreedBehaviour( implements Behaviour)
        - Responsible for breeding when two same species with opposite gender are nearby in given condition
        - This overrides getAction() from Behaviour class
        - Create distance() method to check for adjacency with the target before performing an action.

    LayEggBehaviour( implements Behaviour, Dinosaur) ////// Removed
        - Responsible for laying an egg in a given condition
        - This implements Behaviour to override methods.
        - Override canLayEgg() methods from Dinosaur and getAction() from Behaviour before an action.

    Egg(extends Ground)
        - Responsible for wait for a few turns before creating an instance of corresponding dinosaur.
        - This extends Ground class and override tick() method for counting the number of ticks. After that, GroundLocation
          will be responsible for creating an instance of it on the same spot.
        - Interacting through GroundLocation class after appropriate turns pass to create an instance.

    EcoPoint(abstract)
        - Responsible for collecting point from different situations
        - As this class is static, any classes need this will interact via static methods
        - Any classes that need to check add or subtract will use this class using static methods and a variable.

    VendingMachine( extends Ground )
        - Responsible for selling items to the player
        - Extends Ground and override allowableAction() for PurchaseAction from the player
        - Override tick() methods to check if items are sold and notify to EcoPoint

    Type (ENUM)
        - Responsible for checking which object is in the spot
        - Objects will be added capabilities using this Enum
        - This enum will specify which object is in the specific location for corresponding to determine what needs to be done.

    PurchaseAction (extends Action)
        - Responsible for the player can purchase when VendingMachine is nearby
        - This will extends Action. getAllowableActions() will be overridden in VendingMachine class and then PurchaseAction will be added.
        - Since PurchaseAction is added to VendingMachine, if player approaches to the VendingMachine player may perform PurchaseAction


    CarnivoreMeal, vegeterianMeal and FruitHarvested (extends PortableItem)
        - Responsible for carried by the player and disappear when fed
        - This extends PortableItem class. Then this will override getAllowableActions() to add PurchaseAction class.
        - When player selects this from VendingMachine via PurchaseAction, then addItemToInventory() will be used.

    LaserGun (extends WeaponItem)
        - Responsible for shoot the gun to remove Stegosaur if need.
        - This extends WeaponItem and ShootAction will be added to getAllowableActions() in Allosaur.
        - If LaserGun is in inventory, player always performs ShootAction

    ShootAction (extends Action)
        - Responsible shooting LaserGun if player holds it
        - Overrides execute() from Action and getWeapon() to check if player holds LaserGun, if so, performs an action
        - target will be assigned and if player wants to shoot then perform it

    HatchBehaviour (implements Behaviour)
        - Responsible for Egg to hatch in proper turns
        - Overrides getAction() from Behaviour to count turns and create new instance
        - Egg 'has a' HatchBehaviour and in every turn, invoke turnCounter method in HatchBehaviour

    EcoPoint (static)
        - Reponsible for add or subtract eco points
        - This does not interact with existing system
        - Any class needs to add or subtract the point, static methods will be used.


    We mostly stuck to the initial design but added a few extra classes

    Added classes (Assignment2):
        BreedAction (extends Action)
            - which makes actor mate with an actor with is next to it

        eatFoodAction (extends Action)
            - which makes actor eat the item on the floor
        corpse (extends PortableItem )
            - this extends PortableItem so it can be moved by player
            - Parent class of StegosaurCorpse,AllosaurCorpse,BrachiosaurCorpse because they share the same methods

        StegosaurCorpse,AllosaurCorpse,BrachiosaurCorpse (extends Corpse)
            -Has capabilities of its corpse so it can be identified by other classes
            fruit class which extended from ground class in the first design was changed to extend from fruit class ass the methods in item were more appropriate

        Util
            - This contains several methods that are used widely

        DinosaurGameMap(extends GameMap)
            - Responsible for create Location as GroundLocation

    Modified from existing design(Assignment2):
        Fruit (extends PortableItem)
            - Can be set in Location or carried with player.
            - Fruit has attributes telling its state. Because fruits may be on bush, tree, ground or in the inventory

    Removed classes(Assignment2):
        FruitHarvested class was removed because it was not needed
        ShootAction class was removed because it was not needed
        hatchBehaviour class was removed and its functionality was added into be Egg class which has tick method which checks if the egg is ready to hatch and adds a new dinosaur to that location


    Classes added (Assignment3):
        DrinkAction
            -  Responsible to make actor drink water if next to lake
        QuitAction
            - Responsible to be added and shown in the user's menu
            - hot key for quitting game will be provided to user and if it is selected, processActorTurn() in JurassicWorld will terminate the game

        SeekWaterBehaviour
            - Responsible to move actor to closest lake
        Pterodactyls
            - Responsible for wander, eat fish and breeding
            - This class extends Dinosaur that provide shared methods with Stegosaur and Allosaur.
            - Overrides methods to if it is hungry, baby and conscious for WanderBehaviour, EatBehaviour and BreedBehaviour.

        Lake
            - Responsible for the lake ground and the display character is ~
            - when tick() in Lake is invoked, it will check the number of fish in the lake and determine to skip or add a fish by 60% chance.

        PteodactylsEgg
            - Responsible for wait for a few turns before creating an instance of corresponding dinosaur.
            - This extends Ground class and override tick() method for counting the number of ticks. After that, GroundLocation
              will be responsible for creating an instance of it on the same spot.
            - Interacting through GroundLocation class after appropriate turns pass to create an instance.

        PteodactylsCorpse
            - Responsible for staying in the map for several turns before disappearing or be a food source for carnivorous dinosaurs
            - tick() will be invoked for counting up and remove when certain condition fits.

        Fish
            - Responsible for staying in the same square as lake and a food source for Pterodactyls

        JurassicWorld
            - Responsible for having multiple gameMaps, prompts user for the game mode, decide whether the user selects to quit, calculate turns and chance of raining, and if so, provide water to all the maps.
            - Overrides run() and processPlayerTurn() from World. run() will call selectGameMode() and checks if endGame == true in the middle.
              processPlayerTurn() is to add QuitAction into Actions in order for displaying quitting option to users. If selected, processPlayerTurn() will be terminated and alert run() that users wants to stop.

    Classes Modified(Assignment3)
        Dinosaur
            - moved playturn into Dinosaur for shared dinosaurs

        AttackAction
            - Modified to kill Pterodactyls and hurt Stegosaur

        VendingMachine
            - Added PterodactylsEgg

        PurchaseAction
            - Added option to choose Egg(random) and if it is PterodactylsEgg, PterodactylsEgg is removed from the vending machine

        EcoPoint
            - Updated the way of getting percentage

        Dinosaur
            - Modified to have Pterodactyls

        BreedAction
            - Modified Pterodactyls can also breed
        Type
            - Added more capabilites

        FeedAction
            - Modified player can feed Pterodactyls

        DinosaurGameMap
            - Modified game map has another game map, north or south, in order to switch